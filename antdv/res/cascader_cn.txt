
     Surely Form AI 助手内测开放申请    立即申请 Ant Design Vue 文档组件 高级组件 商店 实战课程 4.2.6English更多 基本用法 移入展开 选择即改变 自定义已选项 动态加载选项 后缀图标 自定义 tag 内容 可以自定义显示 禁用选项 大小 搜索 自定义字段名 多选 APISurely Table 构建更快的网站  更快的构建网站 雪梨表单、为您定制 专属的调研，投票、NPS、报名等系统 Surely Table 构建更快的网站  更快的构建网站 雪梨表单、为您定制 专属的调研，投票、NPS、报名等系统 Surely Table 构建更快的网站  更快的构建网站 12组件总览高级组件 Surely Table  Surely Form 其他Affix固钉ConfigProvider全局化配置FloatButton悬浮按钮NewWatermark水印New其它App包裹组件New通用Button按钮Icon图标Typography排版布局Divider分割线Flex弹性布局NewGrid栅格Layout布局Space间距导航Anchor锚点Breadcrumb面包屑Dropdown下拉菜单Menu导航菜单PageHeader页头Pagination分页Steps步骤条数据录入AutoComplete自动完成Cascader级联选择Checkbox多选框DatePicker日期选择框Form表单Input输入框InputNumber数字输入框Mentions提及Radio单选框Rate评分Select选择器Slider滑动输入条Switch开关TimePicker时间选择框Transfer穿梭框TreeSelect树选择Upload上传数据展示Avatar头像Badge徽标数Calendar日历Card卡片Carousel走马灯Collapse折叠面板Comment评论Descriptions描述列表Empty空状态Image图片List列表Popover气泡卡片QRCode二维码NewSegmented分段控制器NewStatistic统计数值Table表格Tabs标签页Tag标签Timeline时间轴Tooltip文字提示Tour漫游式引导NewTree树形控件反馈Alert警告提示Drawer抽屉Message全局提示Modal对话框Notification通知提醒框Popconfirm气泡确认框Progress进度条Result结果Skeleton骨架屏Spin加载中Cascader 级联选择级联选择框。
何时使用 
          #
        

需要从一组相关联的数据集合进行选择，例如省市区，公司层级，事物分类等。
从一个较大的数据集合中进行选择时，用多级分类进行分隔，方便选择。
比起 Select 组件，可以在同一个浮层中完成选择，有较好的体验。

代码演示Please select基本用法省市区级联。TS<template>
  <a-cascader v-model:value="value" :options="options" placeholder="Please select" />
</template>
<script lang="ts" setup>
import { ref } from 'vue';
import type { CascaderProps } from 'ant-design-vue';
const options: CascaderProps['options'] = [
  {
    value: 'zhejiang',
    label: 'Zhejiang',
    children: [
      {
        value: 'hangzhou',
        label: 'Hangzhou',
        children: [
          {
            value: 'xihu',
            label: 'West Lake',
          },
        ],
      },
    ],
  },
  {
    value: 'jiangsu',
    label: 'Jiangsu',
    children: [
      {
        value: 'nanjing',
        label: 'Nanjing',
        children: [
          {
            value: 'zhonghuamen',
            label: 'Zhong Hua Men',
          },
        ],
      },
    ],
  },
];
const value = ref<string[]>([]);
</script>
Please select移入展开通过移入展开下级菜单，点击完成选择。TS<template>
  <a-cascader
    v-model:value="value"
    :options="options"
    expand-trigger="hover"
    placeholder="Please select"
  />
</template>
<script lang="ts" setup>
import { ref } from 'vue';
import type { CascaderProps } from 'ant-design-vue';
const options: CascaderProps['options'] = [
  {
    value: 'zhejiang',
    label: 'Zhejiang',
    children: [
      {
        value: 'hangzhou',
        label: 'Hangzhou',
        children: [
          {
            value: 'xihu',
            label: 'West Lake',
          },
        ],
      },
    ],
  },
  {
    value: 'jiangsu',
    label: 'Jiangsu',
    children: [
      {
        value: 'nanjing',
        label: 'Nanjing',
        children: [
          {
            value: 'zhonghuamen',
            label: 'Zhong Hua Men',
          },
        ],
      },
    ],
  },
];

const value = ref<string[]>([]);
</script>
Please select选择即改变这种交互允许只选中父级选项。TS<template>
  <a-cascader
    v-model:value="value"
    :options="options"
    placeholder="Please select"
    change-on-select
  />
</template>
<script lang="ts" setup>
import { ref } from 'vue';
import type { CascaderProps } from 'ant-design-vue';
const options: CascaderProps['options'] = [
  {
    value: 'zhejiang',
    label: 'Zhejiang',
    children: [
      {
        value: 'hangzhou',
        label: 'Hangzhou',
        children: [
          {
            value: 'xihu',
            label: 'West Lake',
          },
        ],
      },
    ],
  },
  {
    value: 'jiangsu',
    label: 'Jiangsu',
    children: [
      {
        value: 'nanjing',
        label: 'Nanjing',
        children: [
          {
            value: 'zhonghuamen',
            label: 'Zhong Hua Men',
          },
        ],
      },
    ],
  },
];
const value = ref<string[]>([]);
</script>
Zhejiang /Hangzhou /West Lake ( 752100 ) 自定义已选项例如给最后一项加上邮编链接。TS<template>
  <a-cascader
    v-model:value="value"
    placeholder="Please select"
    :options="options"
    style="width: 100%"
  >
    <template #displayRender="{ labels, selectedOptions }">
      <span v-for="(label, index) in labels" :key="selectedOptions[index].value">
        <span v-if="index === labels.length - 1">
          {{ label }} (
          <a @click="e => handleAreaClick(e, label, selectedOptions[index])">
            {{ selectedOptions[index].code }}
          </a>
          )
        </span>
        <span v-else>{{ label }} /</span>
      </span>
    </template>
  </a-cascader>
</template>
<script lang="ts" setup>
import { ref } from 'vue';
import type { CascaderProps } from 'ant-design-vue';
const options: CascaderProps['options'] = [
  {
    value: 'zhejiang',
    label: 'Zhejiang',
    children: [
      {
        value: 'hangzhou',
        label: 'Hangzhou',
        children: [
          {
            value: 'xihu',
            label: 'West Lake',
            code: 752100,
          },
        ],
      },
    ],
  },
  {
    value: 'jiangsu',
    label: 'Jiangsu',
    children: [
      {
        value: 'nanjing',
        label: 'Nanjing',
        children: [
          {
            value: 'zhonghuamen',
            label: 'Zhong Hua Men',
            code: 453400,
          },
        ],
      },
    ],
  },
];

const handleAreaClick = (e: Event, label: string, option: CascaderProps['options'][number]) => {
  e.stopPropagation();
  console.log('clicked', label, option);
};

const value = ref<string[]>(['zhejiang', 'hangzhou', 'xihu']);
</script>
Please select动态加载选项使用 loadData 实现动态加载选项。

注意：loadData 与 showSearch 无法一起使用。
TS<template>
  <a-cascader
    v-model:value="value"
    :options="options"
    :load-data="loadData"
    placeholder="Please select"
    change-on-select
  />
</template>
<script lang="ts" setup>
import { ref } from 'vue';
import type { CascaderProps } from 'ant-design-vue';

const options = ref<CascaderProps['options']>([
  {
    value: 'zhejiang',
    label: 'Zhejiang',
    isLeaf: false,
  },
  {
    value: 'jiangsu',
    label: 'Jiangsu',
    isLeaf: false,
  },
]);

const loadData: CascaderProps['loadData'] = selectedOptions => {
  const targetOption = selectedOptions[selectedOptions.length - 1];
  targetOption.loading = true;

  // load options lazily
  setTimeout(() => {
    targetOption.loading = false;
    targetOption.children = [
      {
        label: `${targetOption.label} Dynamic 1`,
        value: 'dynamic1',
      },
      {
        label: `${targetOption.label} Dynamic 2`,
        value: 'dynamic2',
      },
    ];
    options.value = [...options.value];
  }, 1000);
};

const value = ref<string[]>([]);
</script>
Please selectPlease selectab后缀图标自定义后缀图标TS<template>
  <a-space>
    <a-cascader
      v-model:value="value1"
      style="margin-top: 1rem"
      :options="options"
      placeholder="Please select"
    >
      <template #suffixIcon><smile-outlined class="test" /></template>
    </a-cascader>
    <a-cascader
      v-model:value="value2"
      suffix-icon="ab"
      style="margin-top: 1rem"
      :options="options"
      placeholder="Please select"
    />
  </a-space>
</template>
<script lang="ts" setup>
import { SmileOutlined } from '@ant-design/icons-vue';
import { ref } from 'vue';
import type { CascaderProps } from 'ant-design-vue';
const options: CascaderProps['options'] = [
  {
    value: 'zhejiang',
    label: 'Zhejiang',
    children: [
      {
        value: 'hangzhou',
        label: 'Hangzhou',
        children: [
          {
            value: 'xihu',
            label: 'West Lake',
          },
        ],
      },
    ],
  },
  {
    value: 'jiangsu',
    label: 'Jiangsu',
    children: [
      {
        value: 'nanjing',
        label: 'Nanjing',
        children: [
          {
            value: 'zhonghuamen',
            label: 'Zhong Hua Men',
          },
        ],
      },
    ],
  },
];
const value1 = ref<string[]>([]);
const value2 = ref<string[]>([]);
</script>
 Please select自定义 tag 内容TS<template>
  <a-cascader
    v-model:value="value"
    multiple
    :options="options"
    placeholder="Please select"
    suffix-icon="Shopping Around"
  >
    <template #tagRender="data">
      <a-tag :key="data.value" color="blue">{{ data.label }}</a-tag>
    </template>
  </a-cascader>
</template>
<script lang="ts" setup>
import { ref } from 'vue';
import type { CascaderProps } from 'ant-design-vue';
const options: CascaderProps['options'] = [
  {
    value: 'zhejiang',
    label: 'Zhejiang',
    children: [
      {
        value: 'freezeKey',
        label: 'freeze',
        children: [
          {
            value: 'key1',
            label: 'salmon',
          },
          {
            value: 'key2',
            label: 'beef',
          },
        ],
      },
      {
        value: 'fruitsKey',
        label: 'fruits',
        children: [
          {
            value: 'key11',
            label: 'apple',
          },
          {
            value: 'key22',
            label: 'banana',
          },
        ],
      },
    ],
  },
  {
    value: 'Chinese delicious food',
    label: '中国美食',
    children: [
      {
        value: 'key3',
        label: '月饼',
        children: [
          {
            value: 'key4',
            label: '蛋黄馅',
          },
          {
            value: 'key5',
            label: '五仁馅',
          },
        ],
      },
    ],
  },
];
const value = ref<string[]>([]);
</script>
Unselect   Change city可以自定义显示切换按钮和结果分开。TS<template>
  <span>
    {{ text }} &nbsp;
    <a-cascader
      v-model:value="value"
      placeholder="Please select"
      :options="options"
      @change="onChange"
    >
      <a href="#">Change city</a>
    </a-cascader>
  </span>
</template>
<script lang="ts" setup>
import { ref } from 'vue';
import type { CascaderProps } from 'ant-design-vue';
const options: CascaderProps['options'] = [
  {
    value: 'zhejiang',
    label: 'Zhejiang',
    children: [
      {
        value: 'hangzhou',
        label: 'Hangzhou',
        children: [
          {
            value: 'xihu',
            label: 'West Lake',
          },
        ],
      },
    ],
  },
  {
    value: 'jiangsu',
    label: 'Jiangsu',
    children: [
      {
        value: 'nanjing',
        label: 'Nanjing',
        children: [
          {
            value: 'zhonghuamen',
            label: 'Zhong Hua Men',
          },
        ],
      },
    ],
  },
];
const value = ref<string[]>([]);
const text = ref<string>('Unselect');

const onChange: CascaderProps['onChange'] = (_value, selectedOptions) => {
  text.value = selectedOptions.map(o => o.label).join(', ');
};
</script>
Please select禁用选项通过指定 options 里的 disabled 字段。TS<template>
  <a-cascader v-model:value="value" placeholder="Please select" :options="options" />
</template>
<script lang="ts" setup>
import { ref } from 'vue';
import type { CascaderProps } from 'ant-design-vue';
const options: CascaderProps['options'] = [
  {
    value: 'zhejiang',
    label: 'Zhejiang',
    children: [
      {
        value: 'hangzhou',
        label: 'Hangzhou',
        children: [
          {
            value: 'xihu',
            label: 'West Lake',
          },
        ],
      },
    ],
  },
  {
    value: 'jiangsu',
    label: 'Jiangsu',
    disabled: true,
    children: [
      {
        value: 'nanjing',
        label: 'Nanjing',
        children: [
          {
            value: 'zhonghuamen',
            label: 'Zhong Hua Men',
          },
        ],
      },
    ],
  },
];
const value = ref<string[]>([]);
</script>
Please selectPlease selectPlease select大小不同大小的级联选择器。TS<template>
  <a-cascader v-model:value="value" placeholder="Please select" size="large" :options="options" />
  <br />
  <br />
  <a-cascader v-model:value="value" placeholder="Please select" :options="options" />
  <br />
  <br />
  <a-cascader v-model:value="value" placeholder="Please select" size="small" :options="options" />
  <br />
  <br />
</template>
<script lang="ts" setup>
import { ref } from 'vue';
import type { CascaderProps } from 'ant-design-vue';
const options: CascaderProps['options'] = [
  {
    value: 'zhejiang',
    label: 'Zhejiang',
    children: [
      {
        value: 'hangzhou',
        label: 'Hangzhou',
        children: [
          {
            value: 'xihu',
            label: 'West Lake',
          },
        ],
      },
    ],
  },
  {
    value: 'jiangsu',
    label: 'Jiangsu',
    children: [
      {
        value: 'nanjing',
        label: 'Nanjing',
        children: [
          {
            value: 'zhonghuamen',
            label: 'Zhong Hua Men',
          },
        ],
      },
    ],
  },
];
const value = ref<string[]>([]);
</script>
Please select搜索可以直接搜索选项并选择。

Cascader[showSearch] 暂不支持服务端搜索，更多信息见 #5547
TS<template>
  <a-cascader
    v-model:value="value"
    :options="options"
    :show-search="{ filter }"
    placeholder="Please select"
  />
</template>
<script lang="ts" setup>
import { ref } from 'vue';
import type { CascaderProps } from 'ant-design-vue';
import type { ShowSearchType } from 'ant-design-vue/es/cascader';
const options: CascaderProps['options'] = [
  {
    value: 'zhejiang',
    label: 'Zhejiang',
    children: [
      {
        value: 'hangzhou',
        label: 'Hangzhou',
        children: [
          {
            value: 'xihu',
            label: 'West Lake',
          },
          {
            value: 'xiasha',
            label: 'Xia Sha',
            disabled: true,
          },
        ],
      },
    ],
  },
  {
    value: 'jiangsu',
    label: 'Jiangsu',
    children: [
      {
        value: 'nanjing',
        label: 'Nanjing',
        children: [
          {
            value: 'zhonghuamen',
            label: 'Zhong Hua men',
          },
        ],
      },
    ],
  },
];
const filter: ShowSearchType['filter'] = (inputValue, path) => {
  return path.some(option => option.label.toLowerCase().indexOf(inputValue.toLowerCase()) > -1);
};

const value = ref<string[]>([]);
</script>
Please select自定义字段名自定义字段名。TS<template>
  <a-cascader
    v-model:value="value"
    :field-names="{ label: 'name', value: 'code', children: 'items' }"
    :options="options"
    placeholder="Please select"
  />
</template>
<script lang="ts" setup>
import { ref } from 'vue';
import type { CascaderProps } from 'ant-design-vue';
const options: CascaderProps['options'] = [
  {
    code: 'zhejiang',
    name: 'Zhejiang',
    items: [
      {
        code: 'hangzhou',
        name: 'Hangzhou',
        items: [
          {
            code: 'xihu',
            name: 'West Lake',
          },
        ],
      },
    ],
  },
  {
    code: 'jiangsu',
    name: 'Jiangsu',
    items: [
      {
        code: 'nanjing',
        name: 'Nanjing',
        items: [
          {
            code: 'zhonghuamen',
            name: 'Zhong Hua Men',
          },
        ],
      },
    ],
  },
];
const value = ref<string[]>([]);
</script>
Cascader.SHOW_PARENT Please selectCascader.SHOW_CHILD Please select多选一次性选择多个选项。TS<template>
  <a-space direction="vertical" style="width: 100%">
    <h4>Cascader.SHOW_PARENT</h4>
    <a-cascader
      v-model:value="value"
      style="width: 100%"
      multiple
      max-tag-count="responsive"
      :options="options"
      placeholder="Please select"
    ></a-cascader>
    <h4>Cascader.SHOW_CHILD</h4>
    <a-cascader
      v-model:value="value"
      style="width: 100%"
      multiple
      max-tag-count="responsive"
      :options="options"
      placeholder="Please select"
      :show-checked-strategy="Cascader.SHOW_CHILD"
    ></a-cascader>
  </a-space>
</template>
<script lang="ts" setup>
import { ref } from 'vue';
import type { CascaderProps } from 'ant-design-vue';
import { Cascader } from 'ant-design-vue';
const options: CascaderProps['options'] = [
  {
    label: 'Light',
    value: 'light',
    children: new Array(20)
      .fill(null)
      .map((_, index) => ({ label: `Number ${index}`, value: index })),
  },
  {
    label: 'Bamboo',
    value: 'bamboo',
    children: [
      {
        label: 'Little',
        value: 'little',
        children: [
          {
            label: 'Toy Fish',
            value: 'fish',
          },
          {
            label: 'Toy Cards',
            value: 'cards',
          },
          {
            label: 'Toy Bird',
            value: 'bird',
          },
        ],
      },
    ],
  },
];

const value = ref<string[]>([]);
</script>

      API#
      
          #
        
<a-cascader :options="options" v-model:value="value" />




参数
说明
类型
默认值
Version




allowClear
是否支持清除
boolean
true



autofocus
自动获取焦点
boolean
false



bordered
是否有边框
boolean
true
3.2


clearIcon
自定义的选择框清空图标
slot
-
3.2


changeOnSelect
（单选时生效）当此项为 true 时，点选每级菜单选项值都会发生变化，具体见上面的演示
boolean
false



defaultValue
默认的选中项
string[] | number[]
[]



disabled
禁用
boolean
false



displayRender
选择后展示的渲染函数,可使用 #displayRender="{labels, selectedOptions}"
({labels, selectedOptions}) => VNode
labels => labels.join(' / ')



popupClassName
自定义浮层类名
string
-
4.0


dropdownStyle
自定义浮层样式
CSSProperties
{}
3.0


expandIcon
自定义次级菜单展开图标
slot
-
3.0


expandTrigger
次级菜单的展开方式
click | hover
'click'



fieldNames
自定义 options 中 label value children 的字段
object
{ label: 'label', value: 'value', children: 'children' }



getPopupContainer
菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位。
Function(triggerNode)
() => document.body



loadData
用于动态加载选项，无法与 showSearch 一起使用
(selectedOptions) => void
-



maxTagCount
最多显示多少个 tag，响应式模式会对性能产生损耗
number | responsive
-
3.0


maxTagPlaceholder
隐藏 tag 时显示的内容
v-slot | function(omittedValues)
-
3.0


multiple
支持多选节点
boolean
-
3.0


notFoundContent
当下拉列表为空时显示的内容
string | slot
'Not Found'



open
控制浮层显隐
boolean
-
3.0


options
可选项数据源
Option[]
-



placeholder
输入框占位文本
string
'请选择'



placement
浮层预设位置
bottomLeft | bottomRight | topLeft | topRight
bottomLeft
3.0


showCheckedStrategy
定义选中项回填的方式。Cascader.SHOW_CHILD: 只显示选中的子节点。Cascader.SHOW_PARENT: 只显示父节点（当父节点下所有子节点都选中时）。
Cascader.SHOW_PARENT | Cascader.SHOW_CHILD
Cascader.SHOW_PARENT
3.3.0


removeIcon
自定义的多选框清除图标
slot
-
3.2


searchValue
设置搜索的值，需要与 showSearch 配合使用
string
-
3.0


showSearch
在选择框中显示搜索框
boolean | object
false



status
设置校验状态
'error' | 'warning'
-
3.3.0


size
输入框大小
large | default | small
default



suffixIcon
自定义的选择框后缀图标
string | VNode | slot
-



tagRender
自定义 tag 内容，多选时生效
slot
-
3.0


value(v-model)
指定选中项
string[] | number[]
-




showSearch 
          #
        
showSearch 为对象时，其中的字段：



参数
说明
类型
默认值




filter
接收 inputValue path 两个参数，当 path 符合筛选条件时，应返回 true，反之则返回 false。
function(inputValue, path): boolean



limit
搜索结果展示数量
number | false
50


matchInputWidth
搜索结果列表是否与输入框同宽
boolean



render
用于渲染 filter 后的选项,可使用 #showSearchRender="{inputValue, path}"
function({inputValue, path}): VNode



sort
用于排序 filter 后的选项
function(a, b, inputValue)




事件 
          #
        



事件名称
说明
回调参数
版本





change
选择完成后的回调
(value, selectedOptions) => void
-



dropdownVisibleChange
显示/隐藏浮层的回调
(value) => void
-
3.0


search
监听搜索，返回输入的值
(value) => void
-
3.0



Option 
          #
        
interface Option {
  value: string | number;
  label?: any;
  disabled?: boolean;
  children?: Option[];
  // 标记是否为叶子节点，设置了 `loadData` 时有效
  // 设为 `false` 时会强制标记为父节点，即使当前节点没有 children，也会显示展开图标
  isLeaf?: boolean;
}

方法 
          #
        



名称
描述




blur()
移除焦点


focus()
获取焦点




注意，如果需要获得中国省市区数据，可以参考 react 组件的实现 china-division。


      最后更新 : 2023/08/06走马灯多选框Ant DesignGitHubAnt Design-ReactAnt Design-AngularAwesome Ant Design AntD Library CommunityChange LogBug ReportLinksVueVue CLIVite@formily/antdvMore ProductsAntV-Data VisualizationEgg-Enterprise Node Framework 备案号： 浙ICP备19034671号     增值电信业务经营许可证： 浙B2-20220161
    
    
    
    
    

    
    
    
  


    