
     Surely Form AI 助手内测开放申请    立即申请 Ant Design Vue 文档组件 高级组件 商店 实战课程 4.2.6English更多 基本用法 简单列表 加载更多 竖排列表样式 栅格列表 响应式的栅格列表 APISurely Table 构建更快的网站  更快的构建网站 雪梨表单、为您定制 专属的调研，投票、NPS、报名等系统 Surely Table 构建更快的网站  更快的构建网站 雪梨表单、为您定制 专属的调研，投票、NPS、报名等系统 Surely Table 构建更快的网站  更快的构建网站 12组件总览高级组件 Surely Table  Surely Form 其他Affix固钉ConfigProvider全局化配置FloatButton悬浮按钮NewWatermark水印New其它App包裹组件New通用Button按钮Icon图标Typography排版布局Divider分割线Flex弹性布局NewGrid栅格Layout布局Space间距导航Anchor锚点Breadcrumb面包屑Dropdown下拉菜单Menu导航菜单PageHeader页头Pagination分页Steps步骤条数据录入AutoComplete自动完成Cascader级联选择Checkbox多选框DatePicker日期选择框Form表单Input输入框InputNumber数字输入框Mentions提及Radio单选框Rate评分Select选择器Slider滑动输入条Switch开关TimePicker时间选择框Transfer穿梭框TreeSelect树选择Upload上传数据展示Avatar头像Badge徽标数Calendar日历Card卡片Carousel走马灯Collapse折叠面板Comment评论Descriptions描述列表Empty空状态Image图片List列表Popover气泡卡片QRCode二维码NewSegmented分段控制器NewStatistic统计数值Table表格Tabs标签页Tag标签Timeline时间轴Tooltip文字提示Tour漫游式引导NewTree树形控件反馈Alert警告提示Drawer抽屉Message全局提示Modal对话框Notification通知提醒框Popconfirm气泡确认框Progress进度条Result结果Skeleton骨架屏Spin加载中List 列表通用列表。
何时使用 
          #
        
最基础的列表展示，可承载文字、列表、图片、段落，常用于后台数据展示页面。
代码演示Ant Design Title 1Ant Design, a design language for background applications, is refined by Ant UED TeamAnt Design Title 2Ant Design, a design language for background applications, is refined by Ant UED TeamAnt Design Title 3Ant Design, a design language for background applications, is refined by Ant UED TeamAnt Design Title 4Ant Design, a design language for background applications, is refined by Ant UED Team基本用法基础列表。TS<template>
  <a-list item-layout="horizontal" :data-source="data">
    <template #renderItem="{ item }">
      <a-list-item>
        <a-list-item-meta
          description="Ant Design, a design language for background applications, is refined by Ant UED Team"
        >
          <template #title>
            <a href="https://www.antdv.com/">{{ item.title }}</a>
          </template>
          <template #avatar>
            <a-avatar src="https://joeschmoe.io/api/v1/random" />
          </template>
        </a-list-item-meta>
      </a-list-item>
    </template>
  </a-list>
</template>
<script lang="ts" setup>
interface DataItem {
  title: string;
}
const data: DataItem[] = [
  {
    title: 'Ant Design Title 1',
  },
  {
    title: 'Ant Design Title 2',
  },
  {
    title: 'Ant Design Title 3',
  },
  {
    title: 'Ant Design Title 4',
  },
];
</script>
Small SizeHeaderRacing car sprays burning fuel into crowd.Japanese princess to wed commoner.Australian walks 100km after outback crash.Man charged over missing wedding girl.Los Angeles battles huge wildfires.FooterDefault SizeHeaderRacing car sprays burning fuel into crowd.Japanese princess to wed commoner.Australian walks 100km after outback crash.Man charged over missing wedding girl.Los Angeles battles huge wildfires.FooterLarge SizeHeaderRacing car sprays burning fuel into crowd.Japanese princess to wed commoner.Australian walks 100km after outback crash.Man charged over missing wedding girl.Los Angeles battles huge wildfires.Footer简单列表列表拥有大、中、小三种尺寸。
通过设置 size 为 large small 分别把按钮设为大、小尺寸。若不设置 size，则尺寸为中。
可通过设置 header 和 footer，来自定义列表头部和尾部。TS<template>
  <h3 :style="{ margin: '16px 0' }">Small Size</h3>
  <a-list size="small" bordered :data-source="data">
    <template #renderItem="{ item }">
      <a-list-item>{{ item }}</a-list-item>
    </template>
    <template #header>
      <div>Header</div>
    </template>
    <template #footer>
      <div>Footer</div>
    </template>
  </a-list>
  <h3 :style="{ marginBottom: '16px' }">Default Size</h3>
  <a-list bordered :data-source="data">
    <template #renderItem="{ item }">
      <a-list-item>{{ item }}</a-list-item>
    </template>
    <template #header>
      <div>Header</div>
    </template>
    <template #footer>
      <div>Footer</div>
    </template>
  </a-list>
  <h3 :style="{ margin: '16px 0' }">Large Size</h3>
  <a-list size="large" bordered :data-source="data">
    <template #renderItem="{ item }">
      <a-list-item>{{ item }}</a-list-item>
    </template>
    <template #header>
      <div>Header</div>
    </template>
    <template #footer>
      <div>Footer</div>
    </template>
  </a-list>
</template>
<script lang="ts" setup>
const data: string[] = [
  'Racing car sprays burning fuel into crowd.',
  'Japanese princess to wed commoner.',
  'Australian walks 100km after outback crash.',
  'Man charged over missing wedding girl.',
  'Los Angeles battles huge wildfires.',
];
</script>
ChristiansenAnt Design, a design language for background applications, is refined by Ant UED TeamcontenteditmoreJohnsonAnt Design, a design language for background applications, is refined by Ant UED TeamcontenteditmoreزارعیAnt Design, a design language for background applications, is refined by Ant UED Teamcontenteditmoreloading more加载更多可通过 loadMore 属性实现加载更多功能。TS<template>
  <a-list
    class="demo-loadmore-list"
    :loading="initLoading"
    item-layout="horizontal"
    :data-source="list"
  >
    <template #loadMore>
      <div
        v-if="!initLoading && !loading"
        :style="{ textAlign: 'center', marginTop: '12px', height: '32px', lineHeight: '32px' }"
      >
        <a-button @click="onLoadMore">loading more</a-button>
      </div>
    </template>
    <template #renderItem="{ item }">
      <a-list-item>
        <template #actions>
          <a key="list-loadmore-edit">edit</a>
          <a key="list-loadmore-more">more</a>
        </template>
        <a-skeleton avatar :title="false" :loading="!!item.loading" active>
          <a-list-item-meta
            description="Ant Design, a design language for background applications, is refined by Ant UED Team"
          >
            <template #title>
              <a href="https://www.antdv.com/">{{ item.name.last }}</a>
            </template>
            <template #avatar>
              <a-avatar :src="item.picture.large" />
            </template>
          </a-list-item-meta>
          <div>content</div>
        </a-skeleton>
      </a-list-item>
    </template>
  </a-list>
</template>
<script lang="ts" setup>
import { onMounted, ref, nextTick } from 'vue';
const count = 3;
const fakeDataUrl = `https://randomuser.me/api/?results=${count}&inc=name,gender,email,nat,picture&noinfo`;

const initLoading = ref(true);
const loading = ref(false);
const data = ref([]);
const list = ref([]);
onMounted(() => {
  fetch(fakeDataUrl)
    .then(res => res.json())
    .then(res => {
      initLoading.value = false;
      data.value = res.results;
      list.value = res.results;
    });
});

const onLoadMore = () => {
  loading.value = true;
  list.value = data.value.concat(
    [...new Array(count)].map(() => ({ loading: true, name: {}, picture: {} })),
  );
  fetch(fakeDataUrl)
    .then(res => res.json())
    .then(res => {
      const newData = data.value.concat(res.results);
      loading.value = false;
      data.value = newData;
      list.value = newData;
      nextTick(() => {
        // Resetting window's offsetTop so as to display react-virtualized demo underfloor.
        // In real scene, you can using public method of react-virtualized:
        // https://stackoverflow.com/questions/46700726/how-to-use-public-method-updateposition-of-react-virtualized
        window.dispatchEvent(new Event('resize'));
      });
    });
};
</script>
<style scoped>
.demo-loadmore-list {
  min-height: 350px;
}
</style>
ant design vue part 0Ant Design, a design language for background applications, is refined by Ant UED Team. We supply a series of design principles, practical patterns and high quality design resources (Sketch and Axure), to help people create their product prototypes beautifully and efficiently. 156 156 2ant design vue part 1Ant Design, a design language for background applications, is refined by Ant UED Team. We supply a series of design principles, practical patterns and high quality design resources (Sketch and Axure), to help people create their product prototypes beautifully and efficiently. 156 156 2ant design vue part 2Ant Design, a design language for background applications, is refined by Ant UED Team. We supply a series of design principles, practical patterns and high quality design resources (Sketch and Axure), to help people create their product prototypes beautifully and efficiently. 156 156 2ant design vue footer part 12345•••8竖排列表样式通过设置 itemLayout 属性为 vertical 可实现竖排列表样式。TS<template>
  <a-list item-layout="vertical" size="large" :pagination="pagination" :data-source="listData">
    <template #footer>
      <div>
        <b>ant design vue</b>
        footer part
      </div>
    </template>
    <template #renderItem="{ item }">
      <a-list-item key="item.title">
        <template #actions>
          <span v-for="{ icon, text } in actions" :key="icon">
            <component :is="icon" style="margin-right: 8px" />
            {{ text }}
          </span>
        </template>
        <template #extra>
          <img
            width="272"
            alt="logo"
            src="https://gw.alipayobjects.com/zos/rmsportal/mqaQswcyDLcXyDKnZfES.png"
          />
        </template>
        <a-list-item-meta :description="item.description">
          <template #title>
            <a :href="item.href">{{ item.title }}</a>
          </template>
          <template #avatar><a-avatar :src="item.avatar" /></template>
        </a-list-item-meta>
        {{ item.content }}
      </a-list-item>
    </template>
  </a-list>
</template>
<script lang="ts" setup>
import { StarOutlined, LikeOutlined, MessageOutlined } from '@ant-design/icons-vue';
const listData: Record<string, string>[] = [];

for (let i = 0; i < 23; i++) {
  listData.push({
    href: 'https://www.antdv.com/',
    title: `ant design vue part ${i}`,
    avatar: 'https://joeschmoe.io/api/v1/random',
    description:
      'Ant Design, a design language for background applications, is refined by Ant UED Team.',
    content:
      'We supply a series of design principles, practical patterns and high quality design resources (Sketch and Axure), to help people create their product prototypes beautifully and efficiently.',
  });
}

const pagination = {
  onChange: (page: number) => {
    console.log(page);
  },
  pageSize: 3,
};
const actions: Record<string, any>[] = [
  { icon: StarOutlined, text: '156' },
  { icon: LikeOutlined, text: '156' },
  { icon: MessageOutlined, text: '2' },
];
</script>
Title 1Card contentTitle 2Card contentTitle 3Card contentTitle 4Card content栅格列表可以通过设置 List 的 grid 属性来实现栅格列表，column 可设置期望显示的列数。TS<template>
  <a-list :grid="{ gutter: 16, column: 4 }" :data-source="data">
    <template #renderItem="{ item }">
      <a-list-item>
        <a-card :title="item.title">Card content</a-card>
      </a-list-item>
    </template>
  </a-list>
</template>
<script lang="ts" setup>
interface DataItem {
  title: string;
}
const data: DataItem[] = [
  {
    title: 'Title 1',
  },
  {
    title: 'Title 2',
  },
  {
    title: 'Title 3',
  },
  {
    title: 'Title 4',
  },
];
</script>
Title 1Card contentTitle 2Card contentTitle 3Card contentTitle 4Card contentTitle 5Card contentTitle 6Card content响应式的栅格列表响应式的栅格列表。尺寸与 Layout Grid 保持一致。TS<template>
  <a-list :grid="{ gutter: 16, xs: 1, sm: 2, md: 4, lg: 4, xl: 6, xxl: 3 }" :data-source="data">
    <template #renderItem="{ item }">
      <a-list-item>
        <a-card :title="item.title">Card content</a-card>
      </a-list-item>
    </template>
  </a-list>
</template>
<script lang="ts" setup>
interface DataItem {
  title: string;
}
const data: DataItem[] = [
  {
    title: 'Title 1',
  },
  {
    title: 'Title 2',
  },
  {
    title: 'Title 3',
  },
  {
    title: 'Title 4',
  },
  {
    title: 'Title 5',
  },
  {
    title: 'Title 6',
  },
];
</script>

      API#
      
          #
        
List 
          #
        



参数
说明
类型
默认值
版本





bordered
是否展示边框
boolean
false




dataSource
列表数据源
any[]
-
1.5.0



footer
列表底部
string|slot
-




grid
列表栅格配置
object
-




header
列表头部
string|slot
-




itemLayout
设置 List.Item 布局, 设置成 vertical 则竖直样式显示, 默认横排
string
-




loading
当卡片内容还在加载中时，可以用 loading 展示一个占位
boolean|object
false




loadMore
加载更多
string|slot
-




locale
默认文案设置，目前包括空数据文案
object
emptyText: '暂无数据'




pagination
对应的 pagination 配置, 设置 false 不显示
boolean|object
false




renderItem
自定义Item函数，也可使用 #renderItem="{item, index}"
({item, index}) => vNode

-



rowKey
各项 key 的取值，可以是字符串或一个函数
item => string|number





size
list 的尺寸
default | middle | small
default




split
是否展示分割线
boolean
true





pagination 
          #
        
分页的配置项。



参数
说明
类型
默认值




position
指定分页显示的位置
'top' | 'bottom' | 'both'
'bottom'



更多配置项，请查看 Pagination。
List grid props 
          #
        



参数
说明
类型
默认值
版本




column
列数
number oneOf [ 1, 2, 3, 4, 6, 8, 12, 24]
-



gutter
栅格间隔
number
0



xxxl
≥2000px 展示的列数
number
-
3.0


xs
<576px 展示的列数
number
-



sm
≥576px 展示的列数
number
-



md
≥768px 展示的列数
number
-



lg
≥992px 展示的列数
number
-



xl
≥1200px 展示的列数
number
-



xxl
≥1600px 展示的列数
number
-




List.Item 
          #
        



参数
说明
类型
默认值
版本




actions
列表操作组，根据 itemLayout 的不同, 位置在卡片底部或者最右侧
vNode[] | slot
-



extra
额外内容, 通常用在 itemLayout 为 vertical 的情况下, 展示右侧内容; horizontal 展示在列表元素最右侧
string|slot
-




List.Item.Meta 
          #
        



参数
说明
类型
默认值




avatar
列表元素的图标
slot
-


description
列表元素的描述内容
string|slot
-


title
列表元素的标题
string|slot
-




      最后更新 : 2023/09/09布局提及Ant DesignGitHubAnt Design-ReactAnt Design-AngularAwesome Ant Design AntD Library CommunityChange LogBug ReportLinksVueVue CLIVite@formily/antdvMore ProductsAntV-Data VisualizationEgg-Enterprise Node Framework 备案号： 浙ICP备19034671号     增值电信业务经营许可证： 浙B2-20220161
    
    
    
    
    

    
    
    
  


    