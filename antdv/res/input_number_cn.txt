
     Surely Form AI 助手内测开放申请    立即申请 Ant Design Vue 文档组件 高级组件 商店 实战课程 4.2.6English更多 基本用法 三种大小 高精度小数 键盘行为 无边框 自定义状态 前置/后置标签 不可用 格式化展示 超出边界 前缀 图标按钮 APISurely Table 构建更快的网站  更快的构建网站 雪梨表单、为您定制 专属的调研，投票、NPS、报名等系统 Surely Table 构建更快的网站  更快的构建网站 雪梨表单、为您定制 专属的调研，投票、NPS、报名等系统 Surely Table 构建更快的网站  更快的构建网站 12组件总览高级组件 Surely Table  Surely Form 其他Affix固钉ConfigProvider全局化配置FloatButton悬浮按钮NewWatermark水印New其它App包裹组件New通用Button按钮Icon图标Typography排版布局Divider分割线Flex弹性布局NewGrid栅格Layout布局Space间距导航Anchor锚点Breadcrumb面包屑Dropdown下拉菜单Menu导航菜单PageHeader页头Pagination分页Steps步骤条数据录入AutoComplete自动完成Cascader级联选择Checkbox多选框DatePicker日期选择框Form表单Input输入框InputNumber数字输入框Mentions提及Radio单选框Rate评分Select选择器Slider滑动输入条Switch开关TimePicker时间选择框Transfer穿梭框TreeSelect树选择Upload上传数据展示Avatar头像Badge徽标数Calendar日历Card卡片Carousel走马灯Collapse折叠面板Comment评论Descriptions描述列表Empty空状态Image图片List列表Popover气泡卡片QRCode二维码NewSegmented分段控制器NewStatistic统计数值Table表格Tabs标签页Tag标签Timeline时间轴Tooltip文字提示Tour漫游式引导NewTree树形控件反馈Alert警告提示Drawer抽屉Message全局提示Modal对话框Notification通知提醒框Popconfirm气泡确认框Progress进度条Result结果Skeleton骨架屏Spin加载中InputNumber 数字输入框通过鼠标或键盘，输入范围内的数值。
何时使用 
          #
        
当需要获取标准数值时。
代码演示 当前值：3基本用法数字输入框。TS<template>
  <div>
    <a-input-number id="inputNumber" v-model:value="value" :min="1" :max="10" />
    当前值：{{ value }}
  </div>
</template>
<script lang="ts" setup>
import { ref } from 'vue';
const value = ref<number>(3);
</script>
三种大小三种大小的数字输入框，当 size 分别为 large 和 small 时，输入框高度为 40px 和 24px ，默认高度为 32px。TS<template>
  <a-space>
    <a-input-number v-model:value="value1" size="large" :min="1" :max="100000" />
    <a-input-number v-model:value="value2" :min="1" :max="100000" />
    <a-input-number v-model:value="value3" size="small" :min="1" :max="100000" />
  </a-space>
</template>
<script lang="ts" setup>
import { ref } from 'vue';
const value1 = ref<number>(3);
const value2 = ref<number>(3);
const value3 = ref<number>(3);
</script>
高精度小数通过 stringMode 开启高精度小数支持，change 事件将返回 string 类型。
对于旧版浏览器，你需要 BigInt polyfill。TS<template>
  <a-input-number
    v-model:value="value"
    style="width: 200px"
    :min="0"
    :max="10"
    :step="0.00000000000001"
    string-mode
  />
</template>
<script lang="ts" setup>
import { ref } from 'vue';
const value = ref<string>('1');
</script>
Toggle keyboard键盘行为使用 keyboard 属性可以控制键盘行为。TS<template>
  <a-space>
    <a-input-number v-model:value="value" :keyboard="keyboard" :min="1" :max="10" />
    <a-checkbox v-model:checked="keyboard">Toggle keyboard</a-checkbox>
  </a-space>
</template>
<script lang="ts" setup>
import { ref } from 'vue';
const value = ref<number>(3);
const keyboard = ref(true);
</script>
无边框没有边框。TS<template>
  <div>
    <a-input-number id="inputNumber" v-model:value="value" :bordered="false" :min="1" :max="10" />
  </div>
</template>
<script lang="ts" setup>
import { ref } from 'vue';
const value = ref<number>(3);
</script>
自定义状态使用 status 为 InputNumber 添加状态，可选 error 或者 warning。TS<template>
  <a-space direction="vertical" style="width: 100%">
    <a-input-number status="error" style="width: 100%" />
    <a-input-number status="warning" style="width: 100%" />
    <a-input-number status="error" style="width: 100%">
      <template #prefix><ClockCircleOutlined /></template>
    </a-input-number>
    <a-input-number status="warning" style="width: 100%">
      <template #prefix><ClockCircleOutlined /></template>
    </a-input-number>
  </a-space>
</template>
<script lang="ts" setup>
import { ClockCircleOutlined } from '@ant-design/icons-vue';
</script>
+$+$cascader前置/后置标签用于配置一些固定组合。TS<template>
  <a-space direction="vertical">
    <a-input-number v-model:value="value1" addon-before="+" addon-after="$"></a-input-number>
    <a-input-number v-model:value="value2">
      <template #addonBefore>
        <a-select v-model:value="addonBeforeValue" style="width: 60px">
          <a-select-option value="add">+</a-select-option>
          <a-select-option value="minus">-</a-select-option>
        </a-select>
      </template>
      <template #addonAfter>
        <a-select v-model:value="addonAfterValue" style="width: 60px">
          <a-select-option value="USD">$</a-select-option>
          <a-select-option value="EUR">€</a-select-option>
          <a-select-option value="GBP">£</a-select-option>
          <a-select-option value="CNY">¥</a-select-option>
        </a-select>
      </template>
    </a-input-number>
    <a-input-number v-model:value="value3">
      <template #addonAfter><SettingOutlined /></template>
    </a-input-number>
    <a-input-number v-model:value="value4">
      <template #addonAfter>
        <a-cascader placeholder="cascader" style="width: 150px" />
      </template>
    </a-input-number>
  </a-space>
</template>
<script lang="ts" setup>
import { ref } from 'vue';
import { SettingOutlined } from '@ant-design/icons-vue';
const value1 = ref(100);
const value2 = ref(100);
const value3 = ref(100);
const value4 = ref(100);
const addonBeforeValue = ref('add');
const addonAfterValue = ref('USD');
</script>
Toggle disabled不可用点击按钮切换可用状态。TS<template>
  <div>
    <a-input-number v-model:value="value" :min="1" :max="10" :disabled="disabled" />
    <div style="margin-top: 20px">
      <a-button type="primary" @click="toggle">Toggle disabled</a-button>
    </div>
  </div>
</template>
<script lang="ts" setup>
import { ref } from 'vue';
const value = ref<number>(3);
const disabled = ref<boolean>(true);

const toggle = () => {
  disabled.value = !disabled.value;
};
</script>
格式化展示通过 formatter 格式化数字，以展示具有具体含义的数据，往往需要配合 parser 一起使用。TS<template>
  <a-space>
    <a-input-number
      v-model:value="value1"
      :formatter="value => `$ ${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',')"
      :parser="value => value.replace(/\$\s?|(,*)/g, '')"
    />
    <a-input-number
      v-model:value="value2"
      :min="0"
      :max="100"
      :formatter="value => `${value}%`"
      :parser="value => value.replace('%', '')"
    />
  </a-space>
</template>
<script lang="ts" setup>
import { ref } from 'vue';
const value1 = ref<number>(1000);
const value2 = ref<number>(100);
</script>
Reset超出边界当通过受控将 value 超出边界时，提供警告样式。TS<template>
  <a-space>
    <a-input-number v-model:value="value" :min="1" :max="10" />
    <a-button type="primary" @click="value = 99">Reset</a-button>
  </a-space>
</template>
<script lang="ts" setup>
import { ref } from 'vue';
const value = ref<number>(99);
</script>
￥￥￥前缀在输入框上添加前缀图标。TS<template>
  <a-input-number v-model:value="value1" prefix="￥" style="width: 100%" />
  <br />
  <br />
  <a-input-number v-model:value="value2" prefix="￥" style="width: 100%">
    <template #addonBefore>
      <UserOutlined />
    </template>
  </a-input-number>
  <br />
  <br />
  <a-input-number v-model:value="value3" prefix="￥" disabled style="width: 100%" />
</template>
<script lang="ts" setup>
import { ref } from 'vue';
import { UserOutlined } from '@ant-design/icons-vue';
const value1 = ref<number>(1);
const value2 = ref<number>(2);
const value3 = ref<number>(3);
</script>
图标按钮使用 upIcon downIcon 插槽自定义图标。TS<template>
  <div>
    <a-input-number id="inputNumber" v-model:value="value" :min="1" :max="10">
      <template #upIcon>
        <ArrowUpOutlined />
      </template>
      <template #downIcon>
        <ArrowDownOutlined />
      </template>
    </a-input-number>
  </div>
</template>
<script lang="ts" setup>
import { ref } from 'vue';
import { ArrowUpOutlined, ArrowDownOutlined } from '@ant-design/icons-vue';
const value = ref<number>(3);
</script>

      API#
      
          #
        
属性如下



成员
说明
类型
默认值
版本




addonAfter
带标签的 input，设置后置标签
slot
-
3.0


addonBefore
带标签的 input，设置前置标签
slot
-
3.0


autofocus
自动获取焦点
boolean
false



bordered
是否有边框
boolean
true
3.0


controls
是否显示增减按钮
boolean
true
3.0


decimalSeparator
小数点
string
-



defaultValue
初始值
number




disabled
禁用
boolean
false



formatter
指定输入框展示值的格式
function(value: number | string, info: { userTyping: boolean, input: string }): string
-
info: 3.0


keyboard
是否启用键盘快捷行为
boolean
true
3.0


max
最大值
number
Infinity



min
最小值
number
-Infinity



parser
指定从 formatter 里转换回数字的方式，和 formatter 搭配使用
function( string): number
-



precision
数值精度
number
-



prefix
带有前缀图标的 input
slot
-
3.0


size
输入框大小
string
-



status
设置校验状态
'error' | 'warning'
-
3.3.0


step
每次改变步数，可以为小数
number|string
1



stringMode
字符值模式，开启后支持高精度小数。同时 change 事件将返回 string 类型
boolean
false
3.0


upIcon
自定义上箭头图标
slot
<UpOutlined />
3.3.0


downIcon
自定义下箭头图标
slot
<DownOutlined />
3.3.0


value(v-model)
当前值
number





事件 
          #
        



事件名称
说明
回调参数
版本




change
变化回调
Function(value: number | string)



pressEnter
按下回车的回调
function(e)



step
点击上下箭头的回调
(value: number, info: { offset: number, type: 'up' | 'down' }) => void
3.0



方法 
          #
        



名称
描述




blur()
移除焦点


focus()
获取焦点



FAQ 
          #
        
为何受控模式下，value 可以超出 min 和 max 范围？ 
          #
        
在受控模式下，开发者可能自行存储相关数据。如果组件将数据约束回范围内，会导致展示数据与实际存储数据不一致的情况。这使得一些如表单场景存在潜在的数据问题。
为何动态修改 min 和 max 让 value 超出范围不会触发 change 事件？ 
          #
        
change 事件为用户触发事件，自行触发会导致表单库误以为变更来自用户操作。我们以错误样式展示超出范围的数值。

      最后更新 : 2024/11/08输入框布局Ant DesignGitHubAnt Design-ReactAnt Design-AngularAwesome Ant Design AntD Library CommunityChange LogBug ReportLinksVueVue CLIVite@formily/antdvMore ProductsAntV-Data VisualizationEgg-Enterprise Node Framework 备案号： 浙ICP备19034671号     增值电信业务经营许可证： 浙B2-20220161
    
    
    
    
    

    
    
    
  


    