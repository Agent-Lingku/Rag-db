
     Surely Form AI 助手内测开放申请    立即申请 Ant Design Vue 文档组件 高级组件 商店 实战课程 4.2.6English更多 基础栅格 区块间隔 左右偏移 栅格排序 排版 对齐 排序 Flex 填充 响应式布局 其他属性的响应式 栅格配置器 useBreakpoint Hook APISurely Table 构建更快的网站  更快的构建网站 雪梨表单、为您定制 专属的调研，投票、NPS、报名等系统 Surely Table 构建更快的网站  更快的构建网站 雪梨表单、为您定制 专属的调研，投票、NPS、报名等系统 Surely Table 构建更快的网站  更快的构建网站 12组件总览高级组件 Surely Table  Surely Form 其他Affix固钉ConfigProvider全局化配置FloatButton悬浮按钮NewWatermark水印New其它App包裹组件New通用Button按钮Icon图标Typography排版布局Divider分割线Flex弹性布局NewGrid栅格Layout布局Space间距导航Anchor锚点Breadcrumb面包屑Dropdown下拉菜单Menu导航菜单PageHeader页头Pagination分页Steps步骤条数据录入AutoComplete自动完成Cascader级联选择Checkbox多选框DatePicker日期选择框Form表单Input输入框InputNumber数字输入框Mentions提及Radio单选框Rate评分Select选择器Slider滑动输入条Switch开关TimePicker时间选择框Transfer穿梭框TreeSelect树选择Upload上传数据展示Avatar头像Badge徽标数Calendar日历Card卡片Carousel走马灯Collapse折叠面板Comment评论Descriptions描述列表Empty空状态Image图片List列表Popover气泡卡片QRCode二维码NewSegmented分段控制器NewStatistic统计数值Table表格Tabs标签页Tag标签Timeline时间轴Tooltip文字提示Tour漫游式引导NewTree树形控件反馈Alert警告提示Drawer抽屉Message全局提示Modal对话框Notification通知提醒框Popconfirm气泡确认框Progress进度条Result结果Skeleton骨架屏Spin加载中Grid 栅格24 栅格系统。
设计理念 
          #
        

  

在多数业务情况下，Ant Design Vue 需要在设计区域内解决大量信息收纳的问题，因此在 12 栅格系统的基础上，我们将整个设计建议区域按照 24 等分的原则进行划分。划分之后的信息区块我们称之为『盒子』。建议横向排列的盒子数量最多四个，最少一个。『盒子』在整个屏幕上占比见上图。设计部分基于盒子的单位定制盒子内部的排版规则，以保证视觉层面的舒适感。
概述 
          #
        
布局的栅格化系统，我们是基于行（row）和列（col）来定义信息区块的外部框架，以保证页面的每个区域能够稳健地排布起来。下面简单介绍一下它的工作原理：

通过`row`在水平方向建立一组`column`（简写 col）
你的内容应当放置于`col`内，并且，只有`col`可以作为`row`的直接元素
栅格系统中的列是指 1 到 24 的值来表示其跨越的范围。例如，三个等宽的列可以使用 `` 来创建
如果一个`row`中的`col`总和超过 24，那么多余的`col`会作为一个整体另起一行排列

Flex 布局 
          #
        
我们的栅格化系统支持 Flex 布局，允许子元素在父节点内的水平对齐方式 - 居左、居中、居右、等宽排列、分散排列。子元素与子元素之间，支持顶部对齐、垂直居中对齐、底部对齐的方式。同时，支持使用 order 来定义元素的排列顺序。 Flex 布局是基于 24 栅格来定义每一个『盒子』的宽度，但不拘泥于栅格。
代码演示colcol-12col-12col-8col-8col-8col-6col-6col-6col-6基础栅格从堆叠到水平排列。
使用单一的一组 Row 和 Col 栅格组件，就可以创建一个基本的栅格系统，所有列（Col）必须放在 Row 内。TS<template>
  <a-row>
    <a-col :span="24">col</a-col>
  </a-row>
  <a-row>
    <a-col :span="12">col-12</a-col>
    <a-col :span="12">col-12</a-col>
  </a-row>
  <a-row>
    <a-col :span="8">col-8</a-col>
    <a-col :span="8">col-8</a-col>
    <a-col :span="8">col-8</a-col>
  </a-row>
  <a-row>
    <a-col :span="6">col-6</a-col>
    <a-col :span="6">col-6</a-col>
    <a-col :span="6">col-6</a-col>
    <a-col :span="6">col-6</a-col>
  </a-row>
</template>
Horizontalcol-6col-6col-6col-6Responsivecol-6col-6col-6col-6Verticalcol-6col-6col-6col-6col-6col-6col-6col-6区块间隔栅格常常需要和间隔进行配合，你可以使用 Row 的 gutter 属性，我们推荐使用 (16+8n)px 作为栅格间隔(n 是自然数)。
如果要支持响应式，可以写成 { xs: 8, sm: 16, md: 24, lg: 32 }。
如果需要垂直间距，可以写成数组形式 [水平间距, 垂直间距] [16, { xs: 8, sm: 16, md: 24, lg: 32 }]。

数组形式垂直间距在 1.5.0 之后支持。
TS<template>
  <a-divider orientation="left">Horizontal</a-divider>
  <a-row :gutter="16">
    <a-col class="gutter-row" :span="6">
      <div class="gutter-box">col-6</div>
    </a-col>
    <a-col class="gutter-row" :span="6">
      <div class="gutter-box">col-6</div>
    </a-col>
    <a-col class="gutter-row" :span="6">
      <div class="gutter-box">col-6</div>
    </a-col>
    <a-col class="gutter-row" :span="6">
      <div class="gutter-box">col-6</div>
    </a-col>
  </a-row>
  <a-divider orientation="left">Responsive</a-divider>
  <a-row :gutter="{ xs: 8, sm: 16, md: 24, lg: 32 }">
    <a-col class="gutter-row" :span="6">
      <div class="gutter-box">col-6</div>
    </a-col>
    <a-col class="gutter-row" :span="6">
      <div class="gutter-box">col-6</div>
    </a-col>
    <a-col class="gutter-row" :span="6">
      <div class="gutter-box">col-6</div>
    </a-col>
    <a-col class="gutter-row" :span="6">
      <div class="gutter-box">col-6</div>
    </a-col>
  </a-row>
  <a-divider orientation="left">Vertical</a-divider>
  <a-row :gutter="[16, 24]">
    <a-col class="gutter-row" :span="6">
      <div class="gutter-box">col-6</div>
    </a-col>
    <a-col class="gutter-row" :span="6">
      <div class="gutter-box">col-6</div>
    </a-col>
    <a-col class="gutter-row" :span="6">
      <div class="gutter-box">col-6</div>
    </a-col>
    <a-col class="gutter-row" :span="6">
      <div class="gutter-box">col-6</div>
    </a-col>
    <a-col class="gutter-row" :span="6">
      <div class="gutter-box">col-6</div>
    </a-col>
    <a-col class="gutter-row" :span="6">
      <div class="gutter-box">col-6</div>
    </a-col>
    <a-col class="gutter-row" :span="6">
      <div class="gutter-box">col-6</div>
    </a-col>
    <a-col class="gutter-row" :span="6">
      <div class="gutter-box">col-6</div>
    </a-col>
  </a-row>
</template>

<style scoped>
.gutter-box {
  background: #0092ff;
  padding: 8px 0;
}
</style>
col-8col-8col-6 col-offset-6col-6 col-offset-6col-12 col-offset-6左右偏移列偏移。
使用 offset 可以将列向右侧偏。例如，offset={4} 将元素向右侧偏移了 4 个列（column）的宽度。TS<template>
  <a-row>
    <a-col :span="8">col-8</a-col>
    <a-col :span="8" :offset="8">col-8</a-col>
  </a-row>
  <a-row>
    <a-col :span="6" :offset="6">col-6 col-offset-6</a-col>
    <a-col :span="6" :offset="6">col-6 col-offset-6</a-col>
  </a-row>
  <a-row>
    <a-col :span="12" :offset="6">col-12 col-offset-6</a-col>
  </a-row>
</template>
col-18 col-push-6col-6 col-pull-18栅格排序列排序。
通过使用 push 和 pull 类就可以很容易的改变列（column）的顺序。TS<template>
  <a-row>
    <a-col :span="18" :push="6">col-18 col-push-6</a-col>
    <a-col :span="6" :pull="18">col-6 col-pull-18</a-col>
  </a-row>
</template>
sub-element align leftcol-4col-4col-4col-4sub-element align centercol-4col-4col-4col-4sub-element align rightcol-4col-4col-4col-4sub-element monospaced arrangementcol-4col-4col-4col-4sub-element align fullcol-4col-4col-4col-4sub-element align fullcol-4col-4col-4col-4排版布局基础。
子元素根据不同的值 start,center,end,space-between,space-around，分别定义其在父节点里面的排版方式。TS<template>
  <div id="components-grid-demo-flex">
    <a-divider orientation="left">sub-element align left</a-divider>
    <a-row justify="start">
      <a-col :span="4">col-4</a-col>
      <a-col :span="4">col-4</a-col>
      <a-col :span="4">col-4</a-col>
      <a-col :span="4">col-4</a-col>
    </a-row>

    <a-divider orientation="left">sub-element align center</a-divider>
    <a-row justify="center">
      <a-col :span="4">col-4</a-col>
      <a-col :span="4">col-4</a-col>
      <a-col :span="4">col-4</a-col>
      <a-col :span="4">col-4</a-col>
    </a-row>

    <a-divider orientation="left">sub-element align right</a-divider>
    <a-row justify="end">
      <a-col :span="4">col-4</a-col>
      <a-col :span="4">col-4</a-col>
      <a-col :span="4">col-4</a-col>
      <a-col :span="4">col-4</a-col>
    </a-row>

    <a-divider orientation="left">sub-element monospaced arrangement</a-divider>
    <a-row justify="space-between">
      <a-col :span="4">col-4</a-col>
      <a-col :span="4">col-4</a-col>
      <a-col :span="4">col-4</a-col>
      <a-col :span="4">col-4</a-col>
    </a-row>

    <a-divider orientation="left">sub-element align full</a-divider>
    <a-row justify="space-around">
      <a-col :span="4">col-4</a-col>
      <a-col :span="4">col-4</a-col>
      <a-col :span="4">col-4</a-col>
      <a-col :span="4">col-4</a-col>
    </a-row>

    <a-divider orientation="left">sub-element align full</a-divider>
    <a-row justify="space-evenly">
      <a-col :span="4">col-4</a-col>
      <a-col :span="4">col-4</a-col>
      <a-col :span="4">col-4</a-col>
      <a-col :span="4">col-4</a-col>
    </a-row>
  </div>
</template>

<style lang="less" scoped>
:deep(#components-grid-demo-flex) [class~='ant-row'] {
  background: rgba(128, 128, 128, 0.08);
}
</style>
Align Topcol-4col-4col-4col-4Align Middlecol-4col-4col-4col-4Align Bottomcol-4col-4col-4col-4对齐子元素垂直对齐。TS<template>
  <div id="components-grid-demo-flex-align">
    <a-divider orientation="left">Align Top</a-divider>
    <a-row justify="center" align="top">
      <a-col :span="4">
        <p class="height-100">col-4</p>
      </a-col>
      <a-col :span="4">
        <p class="height-50">col-4</p>
      </a-col>
      <a-col :span="4">
        <p class="height-120">col-4</p>
      </a-col>
      <a-col :span="4">
        <p class="height-80">col-4</p>
      </a-col>
    </a-row>

    <a-divider orientation="left">Align Middle</a-divider>
    <a-row justify="space-around" align="middle">
      <a-col :span="4">
        <p class="height-100">col-4</p>
      </a-col>
      <a-col :span="4">
        <p class="height-50">col-4</p>
      </a-col>
      <a-col :span="4">
        <p class="height-120">col-4</p>
      </a-col>
      <a-col :span="4">
        <p class="height-80">col-4</p>
      </a-col>
    </a-row>

    <a-divider orientation="left">Align Bottom</a-divider>
    <a-row justify="space-between" align="bottom">
      <a-col :span="4">
        <p class="height-100">col-4</p>
      </a-col>
      <a-col :span="4">
        <p class="height-50">col-4</p>
      </a-col>
      <a-col :span="4">
        <p class="height-120">col-4</p>
      </a-col>
      <a-col :span="4">
        <p class="height-80">col-4</p>
      </a-col>
    </a-row>
  </div>
</template>

<style lang="less" scoped>
:deep(#components-grid-demo-flex-align) [class~='ant-row'] {
  background: rgba(128, 128, 128, 0.08);
}
</style>
Normal1 col-order-42 col-order-33 col-order-24 col-order-1Responsive 1 col-order-responsive  2 col-order-responsive  3 col-order-responsive  4 col-order-responsive 排序通过 order 来改变元素的排序。TS<template>
  <a-divider orientation="left">Normal</a-divider>
  <a-row>
    <a-col :span="6" :order="4">1 col-order-4</a-col>
    <a-col :span="6" :order="3">2 col-order-3</a-col>
    <a-col :span="6" :order="2">3 col-order-2</a-col>
    <a-col :span="6" :order="1">4 col-order-1</a-col>
  </a-row>
  <a-divider orientation="left">Responsive</a-divider>
  <a-row>
    <a-col :span="6" :xs="{ order: 1 }" :sm="{ order: 2 }" :md="{ order: 3 }" :lg="{ order: 4 }">
      1 col-order-responsive
    </a-col>
    <a-col :span="6" :xs="{ order: 2 }" :sm="{ order: 1 }" :md="{ order: 4 }" :lg="{ order: 3 }">
      2 col-order-responsive
    </a-col>
    <a-col :span="6" :xs="{ order: 3 }" :sm="{ order: 4 }" :md="{ order: 2 }" :lg="{ order: 2 }">
      3 col-order-responsive
    </a-col>
    <a-col :span="6" :xs="{ order: 4 }" :sm="{ order: 3 }" :md="{ order: 1 }" :lg="{ order: 1 }">
      4 col-order-responsive
    </a-col>
  </a-row>
</template>
Percentage columns2 / 53 / 5Fill rest100pxautoRaw flex style1 1 200px0 1 300pxnoneauto with no-wrapFlex 填充Col 提供 flex 属性以支持填充。TS<template>
  <a-divider orientation="left">Percentage columns</a-divider>
  <a-row>
    <a-col :flex="2">2 / 5</a-col>
    <a-col :flex="3">3 / 5</a-col>
  </a-row>
  <a-divider orientation="left">Fill rest</a-divider>
  <a-row>
    <a-col flex="100px">100px</a-col>
    <a-col flex="auto">auto</a-col>
  </a-row>
  <a-divider orientation="left">Raw flex style</a-divider>
  <a-row>
    <a-col flex="1 1 200px">1 1 200px</a-col>
    <a-col flex="0 1 300px">0 1 300px</a-col>
  </a-row>
  <a-row :wrap="false">
    <a-col flex="none">
      <div style="padding: 0 16px">none</div>
    </a-col>
    <a-col flex="auto">auto with no-wrap</a-col>
  </a-row>
</template>
ColColCol响应式布局参照 Bootstrap 的 响应式设计，预设六个响应尺寸：xs sm md lg xl xxl。TS<template>
  <a-row>
    <a-col :xs="2" :sm="4" :md="6" :lg="8" :xl="10">Col</a-col>
    <a-col :xs="20" :sm="16" :md="12" :lg="8" :xl="4">Col</a-col>
    <a-col :xs="2" :sm="4" :md="6" :lg="8" :xl="10">Col</a-col>
  </a-row>
</template>
ColColCol其他属性的响应式span pull push offset order 属性可以通过内嵌到 xs sm md lg xl xxl 属性中来使用。
其中 :xs="6" 相当于 :xs="{ span: 6 }"。TS<template>
  <a-row>
    <a-col :xs="{ span: 5, offset: 1 }" :lg="{ span: 6, offset: 2 }">Col</a-col>
    <a-col :xs="{ span: 11, offset: 1 }" :lg="{ span: 6, offset: 2 }">Col</a-col>
    <a-col :xs="{ span: 5, offset: 1 }" :lg="{ span: 6, offset: 2 }">Col</a-col>
  </a-row>
</template>
Horizontal Gutter (px):81624324048Vertical Gutter (px):81624324048Column Count:2346812ColumnColumnColumnColumnColumnColumnColumnColumn Another Row: ColumnColumnColumnColumn<a-row :gutter="[16,16]">
  <a-col :span="6"/>
  <a-col :span="6"/>
  <a-col :span="6"/>
  <a-col :span="6"/>
</a-row><a-row :gutter="[16,16]">
  <a-col :span="6"/>
  <a-col :span="6"/>
  <a-col :span="6"/>
  <a-col :span="6"/>
</a-row>栅格配置器可以简单配置几种等分栅格和间距。TS<template>
  <div id="components-grid-demo-playground">
    <div style="margin-bottom: 16px">
      <span style="margin-right: 6px">Horizontal Gutter (px):</span>
      <div style="width: 50%">
        <a-slider
          v-model:value="state.gutterKey"
          :min="0"
          :max="Object.keys(state.gutters).length - 1"
          :marks="state.gutters"
          :step="null"
        />
      </div>
      <span style="margin-right: 6px">Vertical Gutter (px):</span>
      <div style="width: 50%">
        <a-slider
          v-model:value="state.vgutterKey"
          :min="0"
          :max="Object.keys(state.vgutters).length - 1"
          :marks="state.vgutters"
          :step="null"
        />
      </div>
      <span style="margin-right: 6px">Column Count:</span>
      <div style="width: 50%">
        <a-slider
          v-model:value="state.colCountKey"
          :min="0"
          :max="Object.keys(state.colCounts).length - 1"
          :marks="state.colCounts"
          :step="null"
        />
      </div>
    </div>
    <a-row :gutter="[state.gutters[state.gutterKey], state.vgutters[state.vgutterKey]]">
      <a-col
        v-for="item in state.colCounts[state.colCountKey]"
        :key="item.toString()"
        :span="24 / state.colCounts[state.colCountKey]"
      >
        <div>Column</div>
      </a-col>
      <a-col
        v-for="item in state.colCounts[state.colCountKey]"
        :key="item.toString()"
        :span="24 / state.colCounts[state.colCountKey]"
      >
        <div>Column</div>
      </a-col>
    </a-row>
    Another Row:
    <a-row :gutter="[state.gutters[state.gutterKey], state.vgutters[state.vgutterKey]]">
      <a-col
        v-for="item in state.colCounts[state.colCountKey]"
        :key="item.toString()"
        :span="24 / state.colCounts[state.colCountKey]"
      >
        <div>Column</div>
      </a-col>
    </a-row>
    <pre>{{ rowColHtml }}</pre>
    <br />
    <pre>{{ rowColHtml }}</pre>
  </div>
</template>
<script lang="ts" setup>
import { computed, reactive } from 'vue';
const state = reactive<{
  gutterKey: number;
  vgutterKey: number;
  colCountKey: number;
  gutters: { [key: number]: number };
  colCounts: { [key: number]: number };
  vgutters: { [key: number]: number };
}>({
  gutterKey: 1,
  vgutterKey: 1,
  colCountKey: 2,
  gutters: {},
  colCounts: {},
  vgutters: {},
});
[8, 16, 24, 32, 40, 48].forEach((value: number, i: number) => {
  state.gutters[i] = value;
});
[8, 16, 24, 32, 40, 48].forEach((value, i) => {
  state.vgutters[i] = value;
});
[2, 3, 4, 6, 8, 12].forEach((value, i) => {
  state.colCounts[i] = value;
});
const rowColHtml = computed(() => {
  const colCount = state.colCounts[state.colCountKey];
  const getter = [state.gutters[state.gutterKey], state.vgutters[state.vgutterKey]];
  let colCode = '<a-row :gutter="[' + getter + ']">\n';
  for (let i = 0; i < colCount; i++) {
    const spanNum = 24 / colCount;
    colCode += '  <a-col :span="' + spanNum + '"/>\n';
  }
  colCode += '</a-row>';
  return colCode;
});
</script>
<style scoped>
:deep(#components-grid-demo-playground) [class~='ant-col'] {
  background: transparent;
  border: 0;
}
:deep(#components-grid-demo-playground) [class~='ant-col'] > div {
  height: 120px;
  font-size: 14px;
  line-height: 120px;
  background: #0092ff;
  border-radius: 4px;
}
:deep(#components-grid-demo-playground) pre {
  padding: 8px 16px;
  font-size: 13px;
  background: #f9f9f9;
  border-radius: 6px;
}
:deep(#components-grid-demo-playground) pre.demo-code {
  direction: ltr;
}
:deep(#components-grid-demo-playground) .ant-col {
  padding: 0;
}
</style>
 Current break point: smmdlgxluseBreakpoint Hook使用 useBreakpoint 个性化布局。TS<template>
  Current break point:
  <template v-for="(value, key) in screens">
    <a-tag v-if="!!value" :key="key" color="blue">
      {{ key }}
    </a-tag>
  </template>
</template>
<script lang="ts" setup>
import { Grid } from 'ant-design-vue';

const useBreakpoint = Grid.useBreakpoint;
const screens = useBreakpoint();
</script>

      API#
      
          #
        
Row 
          #
        



成员
说明
类型
默认值
版本




align
垂直对齐方式
top | middle | bottom | stretch | {[key in 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl']: 'top' | 'middle' | 'bottom' | 'stretch'}
top
object: 4.0


gutter
栅格间隔，可以写成像素值或支持响应式的对象写法来设置水平间隔 { xs: 8, sm: 16, md: 24}。或者使用数组形式同时设置 [水平间距, 垂直间距]（1.5.0 后支持）。
number | object | array
0
-


justify
水平排列方式
start | end | center | space-around | space-between | space-evenly | {[key in 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl']: 'start' | 'end' | 'center' | 'space-around' | 'space-between' | 'space-evenly'}
start
object: 4.0


wrap
是否自动换行
boolean
false
-



Col 
          #
        



成员
说明
类型
默认值
版本




flex
flex 布局填充
string|number
-



offset
栅格左侧的间隔格数，间隔内不可以有栅格
number
0



order
栅格顺序，flex 布局模式下有效
number
0



pull
栅格向左移动格数
number
0



push
栅格向右移动格数
number
0



span
栅格占位格数，为 0 时相当于 display: none
number
-



xs
<576px 响应式栅格，可为栅格数或一个包含其他属性的对象
number|object
-



sm
≥576px 响应式栅格，可为栅格数或一个包含其他属性的对象
number|object
-



md
≥768px 响应式栅格，可为栅格数或一个包含其他属性的对象
number|object
-



lg
≥992px 响应式栅格，可为栅格数或一个包含其他属性的对象
number|object
-



xl
≥1200px 响应式栅格，可为栅格数或一个包含其他属性的对象
number|object
-



xxl
≥1600px 响应式栅格，可为栅格数或一个包含其他属性的对象
number|object
-




您可以使用 主题定制 修改 screen[XS|SM|MD|LG|XL|XXL] 来修改断点值（自 4.0.0 起，codesandbox demo）。
响应式栅格的断点扩展自 BootStrap 4 的规则（不包含链接里 occasionally 的部分)。

      最后更新 : 2024/06/04表单图标Ant DesignGitHubAnt Design-ReactAnt Design-AngularAwesome Ant Design AntD Library CommunityChange LogBug ReportLinksVueVue CLIVite@formily/antdvMore ProductsAntV-Data VisualizationEgg-Enterprise Node Framework 备案号： 浙ICP备19034671号     增值电信业务经营许可证： 浙B2-20220161
    
    
    
    
    

    
    
    
  


    