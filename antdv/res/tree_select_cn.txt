
     Surely Form AI 助手内测开放申请    立即申请 Ant Design Vue 文档组件 高级组件 商店 实战课程 4.2.6English更多 基本用法 可勾选 异步加载 线性样式 自定义选择标签 弹出位置 多选 后缀图标 高亮 虚拟滚动 自定义字段 自定义状态 APISurely Table 构建更快的网站  更快的构建网站 雪梨表单、为您定制 专属的调研，投票、NPS、报名等系统 Surely Table 构建更快的网站  更快的构建网站 雪梨表单、为您定制 专属的调研，投票、NPS、报名等系统 Surely Table 构建更快的网站  更快的构建网站 12组件总览高级组件 Surely Table  Surely Form 其他Affix固钉ConfigProvider全局化配置FloatButton悬浮按钮NewWatermark水印New其它App包裹组件New通用Button按钮Icon图标Typography排版布局Divider分割线Flex弹性布局NewGrid栅格Layout布局Space间距导航Anchor锚点Breadcrumb面包屑Dropdown下拉菜单Menu导航菜单PageHeader页头Pagination分页Steps步骤条数据录入AutoComplete自动完成Cascader级联选择Checkbox多选框DatePicker日期选择框Form表单Input输入框InputNumber数字输入框Mentions提及Radio单选框Rate评分Select选择器Slider滑动输入条Switch开关TimePicker时间选择框Transfer穿梭框TreeSelect树选择Upload上传数据展示Avatar头像Badge徽标数Calendar日历Card卡片Carousel走马灯Collapse折叠面板Comment评论Descriptions描述列表Empty空状态Image图片List列表Popover气泡卡片QRCode二维码NewSegmented分段控制器NewStatistic统计数值Table表格Tabs标签页Tag标签Timeline时间轴Tooltip文字提示Tour漫游式引导NewTree树形控件反馈Alert警告提示Drawer抽屉Message全局提示Modal对话框Notification通知提醒框Popconfirm气泡确认框Progress进度条Result结果Skeleton骨架屏Spin加载中TreeSelect 树选择树型选择控件。
何时使用 
          #
        
类似 Select 的选择控件，可选择的数据结构是一个树形结构时，可以使用 TreeSelect，例如公司层级、学科系统、分类目录等等。
代码演示Please select基本用法最简单的用法。TS<template>
  <a-tree-select
    v-model:value="value"
    show-search
    style="width: 100%"
    :dropdown-style="{ maxHeight: '400px', overflow: 'auto' }"
    placeholder="Please select"
    allow-clear
    tree-default-expand-all
    :tree-data="treeData"
    tree-node-filter-prop="label"
  >
    <template #title="{ value: val, label }">
      <b v-if="val === 'parent 1-1'" style="color: #08c">sss</b>
      <template v-else>{{ label }}</template>
    </template>
  </a-tree-select>
</template>
<script lang="ts" setup>
import { ref, watch } from 'vue';
import type { TreeSelectProps } from 'ant-design-vue';
const value = ref<string>();
const treeData = ref<TreeSelectProps['treeData']>([
  {
    label: 'root 1',
    value: 'root 1',
    children: [
      {
        label: 'parent 1',
        value: 'parent 1',
        children: [
          {
            label: 'parent 1-0',
            value: 'parent 1-0',
            children: [
              {
                label: 'my leaf',
                value: 'leaf1',
              },
              {
                label: 'your leaf',
                value: 'leaf2',
              },
            ],
          },
          {
            label: 'parent 1-1',
            value: 'parent 1-1',
          },
        ],
      },
      {
        label: 'parent 2',
        value: 'parent 2',
      },
    ],
  },
]);
watch(value, () => {
  console.log(value.value);
});
</script>
Node1 可勾选使用勾选框实现多选功能。TS<template>
  <a-tree-select
    v-model:value="value"
    style="width: 100%"
    :tree-data="treeData"
    tree-checkable
    allow-clear
    :show-checked-strategy="SHOW_PARENT"
    placeholder="Please select"
    tree-node-filter-prop="label"
  />
</template>
<script lang="ts" setup>
import { ref, watch } from 'vue';
import type { TreeSelectProps } from 'ant-design-vue';
import { TreeSelect } from 'ant-design-vue';
const SHOW_PARENT = TreeSelect.SHOW_PARENT;

const treeData: TreeSelectProps['treeData'] = [
  {
    label: 'Node1',
    value: '0-0',
    children: [
      {
        label: 'Child Node1',
        value: '0-0-0',
      },
    ],
  },
  {
    label: 'Node2',
    value: '0-1',

    children: [
      {
        label: 'Child Node3',
        value: '0-1-0',
        disabled: true,
      },
      {
        label: 'Child Node4',
        value: '0-1-1',
      },
      {
        label: 'Child Node5',
        value: '0-1-2',
      },
    ],
  },
];

const value = ref<string[]>(['0-0-0']);

watch(value, () => {
  console.log(value.value);
});
</script>
Please select异步加载异步加载树节点。TS<template>
  <a-tree-select
    v-model:value="value"
    tree-data-simple-mode
    style="width: 100%"
    :dropdown-style="{ maxHeight: '400px', overflow: 'auto' }"
    :tree-data="treeData"
    placeholder="Please select"
    :load-data="onLoadData"
  />
</template>
<script lang="ts" setup>
import type { TreeSelectProps } from 'ant-design-vue';
import { ref, watch } from 'vue';
const value = ref<string>();
const treeData = ref<TreeSelectProps['treeData']>([
  { id: 1, pId: 0, value: '1', title: 'Expand to load' },
  { id: 2, pId: 0, value: '2', title: 'Expand to load' },
  { id: 3, pId: 0, value: '3', title: 'Tree Node', isLeaf: true },
]);

watch(value, () => {
  console.log(value.value);
});

const genTreeNode = (parentId: number, isLeaf = false): TreeSelectProps['treeData'][number] => {
  const random = Math.random().toString(36).substring(2, 6);
  return {
    id: random,
    pId: parentId,
    value: random,
    title: isLeaf ? 'Tree Node' : 'Expand to load',
    isLeaf,
  };
};
const onLoadData = (treeNode: TreeSelectProps['treeData'][number]) => {
  return new Promise(resolve => {
    const { id } = treeNode.dataRef;
    setTimeout(() => {
      treeData.value = treeData.value.concat([
        genTreeNode(id, false),
        genTreeNode(id, true),
        genTreeNode(id, true),
      ]);
      console.log(treeData.value);
      resolve(true);
    }, 300);
  });
};
</script>
treeLinetreeLineshowLeafIconshowLeafIconPlease select线性样式通过 treeLine 配置线性样式。TS<template>
  <a-space direction="vertical">
    <a-switch
      v-model:checked="treeLine"
      checked-children="treeLine"
      un-checked-children="treeLine"
    ></a-switch>
    <a-switch
      v-model:checked="showLeafIcon"
      :disabled="!treeLine"
      checked-children="showLeafIcon"
      un-checked-children="showLeafIcon"
    ></a-switch>
    <a-tree-select
      v-model:value="value"
      style="width: 300px"
      placeholder="Please select"
      :tree-line="treeLine && { showLeafIcon }"
      :tree-data="treeData"
      tree-node-filter-prop="title"
    >
      <template #title="{ value: val, title }">
        <b v-if="val === 'parent 1-1'" style="color: #08c">sss</b>
        <template v-else>{{ title }}</template>
      </template>
    </a-tree-select>
  </a-space>
</template>
<script lang="ts" setup>
import { ref, watch } from 'vue';
import type { TreeSelectProps } from 'ant-design-vue';

const treeLine = ref(true);
const showLeafIcon = ref(false);
const value = ref<string>();
const treeData = ref<TreeSelectProps['treeData']>([
  {
    title: 'parent 1',
    value: 'parent 1',
    children: [
      {
        title: 'parent 1-0',
        value: 'parent 1-0',
        children: [
          {
            title: 'my leaf',
            value: 'leaf1',
          },
          {
            title: 'your leaf',
            value: 'leaf2',
          },
        ],
      },
      {
        title: 'parent 1-1',
        value: 'parent 1-1',
      },
    ],
  },
]);
watch(value, () => {
  console.log(value.value);
});
</script>
parent 1   parent 1-0   my leaf    自定义选择标签允许自定义选择标签的样式。仅支持多选模式，单选可直接使用 title 插槽TS<template>
  <a-tree-select
    v-model:value="value"
    show-search
    style="width: 100%"
    :dropdown-style="{ maxHeight: '400px', overflow: 'auto' }"
    placeholder="Please select"
    allow-clear
    multiple
    :show-checked-strategy="SHOW_ALL"
    tree-default-expand-all
    :tree-data="treeData"
    tree-node-filter-prop="label"
  >
    <template #tagRender="{ label, closable, onClose, option }">
      <a-tag :closable="closable" :color="option.color" style="margin-right: 3px" @close="onClose">
        {{ label }}&nbsp;&nbsp;
      </a-tag>
    </template>
    <template #title="{ value: val, label }">
      <b v-if="val === 'parent 1-1'" style="color: #08c">{{ val }}</b>
      <template v-else>{{ label }}</template>
    </template>
  </a-tree-select>
</template>
<script lang="ts" setup>
import { ref, watch } from 'vue';
import type { TreeSelectProps } from 'ant-design-vue';
import { TreeSelect } from 'ant-design-vue';
const SHOW_ALL = TreeSelect.SHOW_ALL;
const value = ref<string[]>(['parent 1', 'parent 1-0', 'leaf1']);
const treeData = ref<TreeSelectProps['treeData']>([
  {
    label: 'parent 1',
    value: 'parent 1',
    color: 'pink',
    children: [
      {
        label: 'parent 1-0',
        value: 'parent 1-0',
        color: 'pink',
        children: [
          {
            label: 'parent 1-0-0',
            value: 'parent 1-0-0',
            color: 'orange',
            children: [
              {
                label: 'my leaf',
                value: 'leaf1',
                color: 'green',
              },
              {
                label: 'your leaf',
                value: 'leaf2',
                color: 'cyan',
              },
            ],
          },
          {
            label: 'parent 1-0-1',
            value: 'parent 1-0-1',
            color: 'blue',
          },
        ],
      },
      {
        label: 'parent 1-1',
        value: 'parent 1-1',
        color: 'blue',
      },
    ],
  },
]);
watch(value, () => {
  console.log('select', value.value);
});
</script>
topLefttopRightbottomLeftbottomRightPlease select弹出位置可以通过 placement 手动指定弹出的位置。TS<template>
  <a-radio-group v-model:value="placement">
    <a-radio-button value="topLeft">topLeft</a-radio-button>
    <a-radio-button value="topRight">topRight</a-radio-button>
    <a-radio-button value="bottomLeft">bottomLeft</a-radio-button>
    <a-radio-button value="bottomRight">bottomRight</a-radio-button>
  </a-radio-group>
  <br />
  <br />
  <a-tree-select
    v-model:value="value"
    show-search
    :dropdown-style="{ maxHeight: '400px', overflow: 'auto', minWidth: '300px' }"
    placeholder="Please select"
    allow-clear
    tree-default-expand-all
    :tree-data="treeData"
    :placement="placement"
    :dropdown-match-select-width="false"
    tree-node-filter-prop="label"
  >
    <template #title="{ value: val, label }">
      <b v-if="val === 'parent 1-1'" style="color: #08c">sss</b>
      <template v-else>{{ label }}</template>
    </template>
  </a-tree-select>
</template>
<script lang="ts" setup>
import { ref } from 'vue';
import type { TreeSelectProps } from 'ant-design-vue';
const placement = ref('topLeft' as const);
const value = ref<string>();
const treeData = ref<TreeSelectProps['treeData']>([
  {
    label: 'parent 1',
    value: 'parent 1',
    children: [
      {
        label: 'parent 1-0',
        value: 'parent 1-0',
        children: [
          {
            label: 'my leaf',
            value: 'leaf1',
          },
          {
            label: 'your leaf',
            value: 'leaf2',
          },
        ],
      },
      {
        label: 'parent 1-1',
        value: 'parent 1-1',
      },
    ],
  },
]);
</script>
 Please select多选多选的树选择。TS<template>
  <a-tree-select
    v-model:value="value"
    show-search
    style="width: 100%"
    :dropdown-style="{ maxHeight: '400px', overflow: 'auto' }"
    placeholder="Please select"
    allow-clear
    multiple
    tree-default-expand-all
    :tree-data="treeData"
    tree-node-filter-prop="label"
  >
    <template #title="{ value: val, label }">
      <b v-if="val === 'parent 1-1'" style="color: #08c">{{ val }}</b>
      <template v-else>{{ label }}</template>
    </template>
  </a-tree-select>
</template>
<script lang="ts" setup>
import { ref, watch } from 'vue';
import type { TreeSelectProps } from 'ant-design-vue';

const value = ref<string[]>([]);
const treeData = ref<TreeSelectProps['treeData']>([
  {
    label: 'parent 1',
    value: 'parent 1',
    children: [
      {
        label: 'parent 1-0',
        value: 'parent 1-0',
        children: [
          {
            label: 'parent 1-0-0',
            value: 'parent 1-0-0',
            children: [
              {
                label: 'my leaf',
                value: 'leaf1',
              },
              {
                label: 'your leaf',
                value: 'leaf2',
              },
            ],
          },
          {
            label: 'parent 1-0-1',
            value: 'parent 1-0-1',
          },
        ],
      },
      {
        label: 'parent 1-1',
        value: 'parent 1-1',
      },
    ],
  },
]);
watch(value, () => {
  console.log('select', value.value);
});
</script>
Please select Please select后缀图标最简单的用法。TS<template>
  <a-space direction="vertical" style="width: 100%">
    <a-tree-select
      v-model:value="value"
      show-search
      style="width: 100%"
      :dropdown-style="{ maxHeight: '400px', overflow: 'auto' }"
      placeholder="Please select"
      allow-clear
      tree-default-expand-all
      :tree-data="treeData"
      :field-names="{
        children: 'children',
        value: 'value',
        label: 'title',
      }"
      tree-node-filter-prop="title"
    >
      <template #suffixIcon><SmileOutlined /></template>
    </a-tree-select>

    <a-tree-select
      v-model:value="value1"
      show-search
      style="width: 100%"
      :dropdown-style="{ maxHeight: '400px', overflow: 'auto' }"
      placeholder="Please select"
      allow-clear
      multiple
      show-arrow
      tree-default-expand-all
      :tree-data="treeData"
      :field-names="{
        children: 'children',
        value: 'value',
        label: 'title',
      }"
      tree-node-filter-prop="title"
    >
      <template #suffixIcon><SmileOutlined /></template>
    </a-tree-select>
  </a-space>
</template>
<script lang="ts" setup>
import { ref, watch } from 'vue';
import { SmileOutlined } from '@ant-design/icons-vue';
import type { TreeSelectProps } from 'ant-design-vue';
const value = ref<string>();
const value1 = ref<string[]>([]);
const treeData = ref<TreeSelectProps['treeData']>([
  {
    title: 'parent 1',
    value: 'parent 1',
    children: [
      {
        title: 'parent 1-0',
        value: 'parent 1-0',
        children: [
          {
            title: 'my leaf',
            value: 'leaf1',
          },
          {
            title: 'your leaf',
            value: 'leaf2',
          },
        ],
      },
      {
        title: 'parent 1-1',
        value: 'parent 1-1',
      },
    ],
  },
]);
watch(value, () => {
  console.log('select', value.value);
});
</script>
Please select高亮搜索值高亮TS<template>
  <a-tree-select
    v-model:value="value"
    v-model:searchValue="searchValue"
    show-search
    style="width: 100%"
    :dropdown-style="{ maxHeight: '400px', overflow: 'auto' }"
    placeholder="Please select"
    allow-clear
    tree-default-expand-all
    :tree-data="treeData"
    tree-node-filter-prop="label"
  >
    <template #title="{ value: val, label }">
      <b v-if="val === 'parent 1-1'" style="color: #08c">sss</b>
      <template v-else>
        <template
          v-for="(fragment, i) in label
            .toString()
            .split(new RegExp(`(?<=${searchValue})|(?=${searchValue})`, 'i'))"
        >
          <span
            v-if="fragment.toLowerCase() === searchValue.toLowerCase()"
            :key="i"
            style="color: #08c"
          >
            {{ fragment }}
          </span>
          <template v-else>{{ fragment }}</template>
        </template>
      </template>
    </template>
  </a-tree-select>
</template>
<script lang="ts" setup>
import type { TreeSelectProps } from 'ant-design-vue';
import { ref, watch } from 'vue';
const value = ref<string>();
const treeData = ref<TreeSelectProps['treeData']>([
  {
    label: 'parent 1',
    value: 'parent 1',
    children: [
      {
        label: 'parent 1-0',
        value: 'parent 1-0',
        children: [
          {
            label: 'parent 1-0-0',
            value: 'parent 1-0-0',
            children: [
              {
                label: 'my leaf',
                value: 'leaf1',
              },
              {
                label: 'your leaf',
                value: 'leaf2',
              },
            ],
          },
          {
            label: 'parent 1-0-1',
            value: 'parent 1-0-1',
          },
        ],
      },
      {
        label: 'parent 1-1',
        value: 'parent 1-1',
      },
    ],
  },
]);
watch(value, () => {
  console.log(value.value);
});
const searchValue = ref('');
</script>
0-0-00-0-1 虚拟滚动使用 height 属性则切换为虚拟滚动。TS<template>
  <a-tree-select
    v-model:value="checkedKeys"
    style="width: 100%"
    tree-checkable
    tree-default-expand-all
    :show-checked-strategy="SHOW_PARENT"
    :height="233"
    :tree-data="treeData"
    :max-tag-count="10"
    tree-node-filter-prop="title"
  >
    <template #title="{ title, value }">
      <span v-if="value === '0-0-1-0'" style="color: #1890ff">{{ title }}</span>
      <template v-else>{{ title }}</template>
    </template>
  </a-tree-select>
</template>
<script lang="ts" setup>
import { ref, watch } from 'vue';
import type { TreeSelectProps } from 'ant-design-vue';
import { TreeSelect } from 'ant-design-vue';
const SHOW_PARENT = TreeSelect.SHOW_PARENT;

function dig(path = '0', level = 3) {
  const list: TreeSelectProps['treeData'] = [];
  for (let i = 0; i < 10; i += 1) {
    const value = `${path}-${i}`;
    const treeNode: TreeSelectProps['treeData'][number] = {
      title: value,
      value,
    };

    if (level > 0) {
      treeNode.children = dig(value, level - 1);
    }

    list.push(treeNode);
  }
  return list;
}

const checkedKeys = ref<string[]>(['0-0-0', '0-0-1']);
watch(checkedKeys, () => {
  console.log('checkedKeys', checkedKeys);
});
const treeData = ref<TreeSelectProps['treeData']>(dig());
</script>
Please select自定义字段fieldNames 替换 treeNode中 title,key,children 字段为treeData中对应的字段TS<template>
  <a-tree-select
    v-model:value="value"
    show-search
    style="width: 100%"
    :dropdown-style="{ maxHeight: '400px', overflow: 'auto' }"
    placeholder="Please select"
    allow-clear
    tree-default-expand-all
    :tree-data="treeData"
    :field-names="{
      children: 'children',
      label: 'name',
      value: 'value',
    }"
    tree-node-filter-prop="name"
  ></a-tree-select>
</template>
<script lang="ts" setup>
import type { TreeSelectProps } from 'ant-design-vue';
import { ref, watch } from 'vue';

const value = ref<string>();
const treeData = ref<TreeSelectProps['treeData']>([
  {
    name: 'parent 1',
    value: 'parent 1',
    children: [
      {
        name: 'parent 1-0',
        value: 'parent 1-0',
        children: [
          {
            name: 'my leaf',
            value: 'leaf1',
          },
          {
            name: 'your leaf',
            value: 'leaf2',
          },
        ],
      },
      {
        name: 'parent 1-1',
        value: 'parent 1-1',
      },
    ],
  },
]);
watch(value, () => {
  console.log(value.value);
});
</script>
Error Warning multiple自定义状态使用 status 为 DatePicker 添加状态，可选 error 或者 warning。TS<template>
  <a-space direction="vertical" style="width: 100%">
    <a-tree-select status="error" style="width: 100%" placeholder="Error" />
    <a-tree-select status="warning" style="width: 100%" multiple placeholder="Warning multiple" />
  </a-space>
</template>

      API#
      
          #
        
Tree props 
          #
        



参数
说明
类型
默认值
版本





allowClear
显示清除按钮
boolean
false




defaultValue
指定默认选中的条目
string/string[]
-




disabled
是否禁用
boolean
false




popupClassName
下拉菜单的 className 属性
string
-

4.0


dropdownMatchSelectWidth
下拉菜单和选择器同宽。默认将设置 min-width，当值小于选择框宽度时会被忽略。false 时会关闭虚拟滚动
boolean | number
true




dropdownStyle
下拉菜单的样式
object
-




fieldNames
替换 treeNode 中 label,value,children 字段为 treeData 中对应的字段
object
{children:'children', label:'title', value: 'value' }

3.0.0


filterTreeNode
是否根据输入项进行筛选，默认用 treeNodeFilterProp 的值作为要筛选的 TreeNode 的属性值
boolean|Function(inputValue: string, treeNode: TreeNode) (函数需要返回 bool 值)
Function




getPopupContainer
菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位。
Function(triggerNode)
() => document.body




labelInValue
是否把每个选项的 label 包装到 value 中，会把 value 类型从 string 变为 {value: string, label: VNode, halfChecked(treeCheckStrictly 时有效): string[] } 的格式
boolean
false




listHeight
设置弹窗滚动高度
number
256




loadData
异步加载数据
function(node)
-




maxTagCount
最多显示多少个 tag
number
-




maxTagPlaceholder
隐藏 tag 时显示的内容
slot/function(omittedValues)
-




multiple
支持多选（当设置 treeCheckable 时自动变为 true）
boolean
false




notFoundContent
当下拉列表为空时显示的内容
slot
Not Found




placeholder
选择框默认文字
string|slot
-




placement
选择框弹出的位置
bottomLeft bottomRight topLeft topRight
bottomLeft
3.3.0



replaceFields
替换 treeNode 中 label,value,key,children 字段为 treeData 中对应的字段
object
{children:'children', label:'title', key:'key', value: 'value' }

1.6.1 (3.0.0 废弃)


searchPlaceholder
搜索框默认文字
string|slot
-




searchValue(v-model)
搜索框的值，可以通过 search 事件获取用户输入
string
-




showCheckedStrategy
定义选中项回填的方式。TreeSelect.SHOW_ALL: 显示所有选中节点(包括父节点). TreeSelect.SHOW_PARENT: 只显示父节点(当父节点下所有子节点都选中时). 默认只显示子节点.
enum{TreeSelect.SHOW_ALL, TreeSelect.SHOW_PARENT, TreeSelect.SHOW_CHILD }
TreeSelect.SHOW_CHILD




showSearch
在下拉中显示搜索框(仅在单选模式下生效)
boolean
false




size
选择框大小，可选 large small
string
'default'




status
设置校验状态
'error' | 'warning'
-
3.3.0



suffixIcon
自定义的选择框后缀图标
VNode | slot
-




tagRender
自定义 tag 内容，多选时生效
slot
-
3.0



title
自定义标题
slot

3.0.0



treeCheckable
显示 checkbox
boolean
false




treeCheckStrictly
checkable 状态下节点选择完全受控（父子节点选中状态不再关联），会使得 labelInValue 强制为 true
boolean
false




treeData
treeNodes 数据，如果设置则不需要手动构造 TreeNode 节点（value 在整个树范围内唯一）
array<{value, label, children, [disabled, disableCheckbox, selectable]}>
[]




treeDataSimpleMode
使用简单格式的 treeData，具体设置参考可设置的类型 (此时 treeData 应变为这样的数据结构: [{id:1, pId:0, value:'1', label:"test1",...},...], pId 是父节点的 id)
false|Array<{ id: string, pId: string, rootPId: null }>
false




treeDefaultExpandAll
默认展开所有树节点
boolean
false




treeDefaultExpandedKeys
默认展开的树节点
string[] | number[]
-




treeExpandedKeys(v-model)
设置展开的树节点
string[] | number[]
-




treeIcon
是否展示 TreeNode title 前的图标，没有默认样式，如设置为 true，需要自行定义图标相关样式
boolean
false




treeLine
是否展示线条样式，请参考 Tree - showLine
boolean | object
false
3.0



treeLoadedKeys
（受控）已经加载的节点，需要配合 loadData 使用
string[]
[]
3.3.0



treeNodeFilterProp
输入项过滤对应的 treeNode 属性
string
'value'




treeNodeLabelProp
作为显示的 prop 设置
string
'title'




value(v-model)
指定当前选中的条目
string/string[]
-




virtual
设置 false 时关闭虚拟滚动
boolean
true
3.0




事件 
          #
        



事件名称
说明
回调参数
版本




change
选中树节点或输入值发生变化时调用此函数
function(value, label, extra)



dropdownVisibleChange
展开下拉菜单的回调
function(open)
3.0


search
文本框值变化时回调
function(value: string)



select
树节点被选中时调用
function(value, node, extra)



treeExpand
展开树节点时调用
function(expandedKeys)




Tree 方法 
          #
        



名称
描述




blur()
移除焦点


focus()
获取焦点



TreeNode props 
          #
        

建议使用 treeData 来代替 TreeNode，免去手工构造麻烦




参数
说明
类型
默认值
版本




checkable
当树为 checkable 时，设置独立节点是否展示 Checkbox
boolean
-



disableCheckbox
禁掉 checkbox
boolean
false



disabled
是否禁用
boolean
false



isLeaf
是否是叶子节点
boolean
false



key
此项必须设置（其值在整个树范围内唯一）
string | number
-



selectable
是否可选
boolean
true



title
树节点显示的内容
string|slot
'---'



value
默认根据此属性值进行筛选（其值在整个树范围内唯一）
string
-





      最后更新 : 2024/04/30树形控件排版Ant DesignGitHubAnt Design-ReactAnt Design-AngularAwesome Ant Design AntD Library CommunityChange LogBug ReportLinksVueVue CLIVite@formily/antdvMore ProductsAntV-Data VisualizationEgg-Enterprise Node Framework 备案号： 浙ICP备19034671号     增值电信业务经营许可证： 浙B2-20220161
    
    
    
    
    

    
    
    
  


    